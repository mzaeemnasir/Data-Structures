//LAB 09: AVL
//Task1

#include<iostream>
using namespace std;
 
struct node
{
    int data, height;
    node* left;
    node* right;
}*root;
class AVL
{
   
private:
    node* root;
public:
    AVL()
    {
        root = NULL;
    }

    int height(node* t)
    {
        return (t == NULL ? -1 : t->height);
    }

    node* insert(node* Node, int value)
    {
        if (Node == NULL)
        {
            Node = new node;
            Node->data = value;
            Node->height = 0;
            Node->left = Node->right = NULL;
        }
        else if (value < Node->data)
        {
            if (Node->left != NULL)
            {
                insert(Node->left, value);
            }
            else
            {
                Node->left = new node();
                Node->left->data = value;
                Node->left->left = NULL;
                Node->left->right = NULL;
                if (height(Node->left) - height(Node->right) == 2)
                {
                    if (value < Node->left->data)
                        Node = rr_rotation(Node);
                    else
                        Node = rl_rotation(Node);
                }
            }
        }
        else if (value >= Node->data)
        {
            if (Node->right != NULL)
            {
                insert(Node->right, value);
            }
            else
            {
                Node->right = new node();
                Node->right->data = value;
                Node->right->right = NULL;
                Node->right->left = NULL;
                if (height(Node->right) - height(Node->left) == 2)
                {
                    if (value > Node->right->data)
                        Node = ll_rotation(Node);
                    else
                        Node = lr_rotation(Node);
                }
            }
        }
        Node->height = max(height(Node->left), height(Node->right)) + 1;
        return Node;
    }
    node* rr_rotation(node* Node)
    {
        node* temp;
        temp = Node->right;
        Node->right = temp->left;
        temp->left = Node;
        return temp;
    }
    node* ll_rotation(node* Node)
    {
        node* temp;
        temp = Node->left;
        Node->left = temp->right;
        temp->right = Node;
        return temp;
    }
    node* lr_rotation(node* Node)
    {
        node* temp;
        temp = Node->left;
        Node->left = rr_rotation(temp);
        return ll_rotation(Node);
       
    }
    node* rl_rotation(node* Node)
    {
        node* temp;
        temp = Node->right;
        Node->right = ll_rotation(temp);
        return rr_rotation(Node);
      
    }

    void inorder(node* leaf)
    {
        if (leaf != NULL)
        {
            inorder(leaf->left);
            cout << leaf->data << " ";
            inorder(leaf->right);
        }
    }
    void preorder(node* leaf)
    {
        if (leaf != NULL)
        {
            cout << leaf->data << ",";
            preorder(leaf->left);
            preorder(leaf->right);
        }
    }
    void postorder(node* leaf)
    {
        if (leaf != NULL)
        {
            postorder(leaf->left);
            postorder(leaf->right);
            cout << leaf->data << " ";
        }
    }

    node* findMin(node* t)
    {
        if (t == NULL)
            return NULL;
        else if (t->left == NULL)
            return t;
        else
            return findMin(t->left);
    }

    node* Delete(int x, node* t)
    {
        node* temp;

        // Element not found
        if (t == NULL)
            return NULL;

        // Searching for element
        else if (x < t->data)
            t->left =Delete(x, t->left);
        else if (x > t->data)
            t->right = Delete(x, t->right);

        // Element found
        // With 2 children
        else if (t->left && t->right)
        {
            temp = findMin(t->right);
            t->data = temp->data;
            t->right = Delete(t->data, t->right);
        }
        // With one or zero child
        else
        {
            temp = t;
            if (t->left == NULL)
                t = t->right;
            else if (t->right == NULL)
                t = t->left;
            delete temp;
        }
        if (t == NULL)
            return t;

        t->height = max(height(t->left), height(t->right)) + 1;

        if (height(t->left) - height(t->right) == -2)
        {
            // right right case
            if (height(t->right->right) - height(t->right->left) == 1)
                return ll_rotation(t);
            // right left case
            else
                return lr_rotation(t);
        }
        // If right node is deleted, left case
        else if (height(t->right) - height(t->left) == 2)
        {
            // left left case
            if (height(t->left->left) - height(t->left->right) == 1) {
                return rr_rotation(t);
            }
            // left right case
            else
                return rl_rotation(t);
        }
        return t;
    }
	
};

int main()
{
    AVL A;
    int value, choice;
    while (1)
    {
        A:cout << "1. Insert\n"
            "2. Display\n"
            "3. Delete\n"
            "Choice: ";
        cin >> choice;
        if (choice == 1)
        {
            cout << "Enter Value: ";
            cin >> value;
            root=A.insert(root, value);
        }
        else if (choice == 2)
        {
            int opt;
            system("cls");
        B:cout << "\n\t1. Inorder\n"
            "\t2. Pre Order\n"
            "\t3. Post Order\n"
            "\t4. Go Back\n"
            "\tChoice: ";
        cin >> opt;
        if (opt == 1)
        {
            A.inorder(root);
            goto B;
        }
        else if (opt == 2)
        {
            
            A.preorder(root);
            goto B;
        }
        else if (opt == 3)
        {
            A.postorder(root);
            goto B;
        }
        else if (opt == 4)
        {
            goto A;
        }
        else
        {
            cout << "Invaid Choice!!\n";
            goto B;
        }
        }
        else if (choice == 3)
        {
            int del;
            cout << "Enter Element to delete: ";
            cin >> del;
            A.Delete(del,root);
        }
    }
}

